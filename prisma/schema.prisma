datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserData {
  id         Int        @id @default(autoincrement())
  name       String?
  email      String     @unique
  image      String?
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  Category   Category[]
  List       List[]
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String    
  items         Item[]
  UserData      UserData? @relation(fields: [userDataId], references: [id])
  userDataId    Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
}

model Item {
  id           Int       @id @default(autoincrement())
  item_name    String    
  quantity     Int
  is_purchased Boolean
  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  List         List?     @relation(fields: [listId], references: [id])
  listId       Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
}

model List {
  id         Int        @id @default(autoincrement())
  list_name  String     @unique
  items      Item[]
  is_done    Boolean
  UserData   UserData?  @relation(fields: [ownerId], references: [id])
  ownerId    Int?
  accessors  Accessor[]
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
}

model Accessor {
  id         Int      @id @default(autoincrement())
  email      String?  @unique
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  List       List?    @relation(fields: [listId], references: [id])
  listId     Int?
}
